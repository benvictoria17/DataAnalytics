{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"setup.pyynb","provenance":[],"private_outputs":true,"authorship_tag":"ABX9TyP1R2mratf8/CqhXv8V3jSk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"1_FoM1Q62jMf","colab_type":"code","colab":{}},"source":["!/usr/bin/env python"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iTWFnce_1GZ2","colab_type":"code","colab":{}},"source":["import sys\n","import os\n","import shutil\n","import codecs"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8IZGK-4B2naj","colab_type":"code","colab":{}},"source":["from distutils.core import Command\n","from distutils.command.clean import clean as Clean"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HdpCia-43BRf","colab_type":"code","colab":{}},"source":["class CleanCommand(Clean):\n","    def run(self):\n","        Clean.run(self)\n","\n","        for filename in RELPATH_FILES_CLEAN:\n","            if os.path.exists(filename):\n","                shutil.rmtree(filename)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ONBot7XJ3Eim","colab_type":"code","colab":{}},"source":[" for dirpath, dirnames, filenames in os.walk(ABSPATH_ROOTDIR):\n","            for filename in filenames:\n","                for extension in RELPATH_WALK_FILES_EXT_CLEAN:\n","                    if filename.endswith(extension):\n","                        path = os.path.join(dirpath, filename)\n","                        os.unlink(path)\n","\n","            for dirname in dirnames:\n","                if dirname in RELPATH_WALK_DIRS_CLEAN:\n","                    path = os.path.join(dirpath, dirname)\n","                    shutil.rmtree(path, ignore_errors = True)\n","\n","class TestCommand(Command):\n","    user_options = [('pytest=', 'a', 'arguments to be passed to pytest')]\n","\n","    def initialize_options(self):\n","        self.args_pytest = [ ]\n","\n","    def finalize_options(self):\n","        pass\n","\n","    def run(self):\n","        import pytest\n","\n","        errno = pytest.main(self.args_pytest)\n","\n","        sys.exit(errno)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_0lyvTJ93KK3","colab_type":"code","colab":{}},"source":["def get_long_description(filepaths):\n","    content   = ''\n","    filepaths = filepaths if isinstance(filepaths, list) else [filepaths]\n","\n","    if filepaths:\n","        for i, filepath in enumerate(filepaths):\n","            if os.path.exists(filepath):\n","                if os.path.isfile(filepath):\n","                    if os.path.getsize(filepath) > 0:\n","                        f        = codecs.open(filepath, mode = 'r', encoding = 'utf-8')\n","                        raw      = f.read()\n","                        content += '{prepend}{content}'.format(prepend = '' if i is 0 else '\\n\\n', content = raw)\n","\n","                        f.close()\n","                else:\n","                    raise ValueError('Not a file: {filepath}'.format(filepath = filepath))\n","            else:\n","                raise FileNotFoundError('No such file found: {filepath}'.format(filepath = filepath))\n","\n","    return content\n","\n","def main():\n","    try:\n","        from setuptools import setup\n","        args_setuptools = dict(\n","            keywords      = ', '.join([keyword for keyword in package.keywords])\n","        )\n","    except ImportError:\n","        from distutils.core import setup\n","        args_setuptools = dict()\n","\n","    metadata = dict(\n","        name             = package.name,\n","        version          = package.version,\n","        description      = package.description,\n","        long_description = get_long_description(package.long_description),\n","        author           = ','.join([author['name'] for author in package.authors]),\n","        author_email     = ','.join([author['email'] for author in package.authors]),\n","        maintainer       = ','.join([maintainer['name'] for maintainer in package.maintainers]),\n","        maintainer_email = ','.join([maintainer['email'] for maintainer in package.maintainers]),\n","        license          = package.license,\n","        packages         = package.modules,\n","        url              = package.homepage,\n","        cmdclass         = {\n","            'clean': CleanCommand,\n","            'test': TestCommand\n","        },\n","        **args_setuptools\n","    )\n","\n","    setup(**metadata)\n","\n","if __name__ == '__main__':\n","    main()"],"execution_count":0,"outputs":[]}]}